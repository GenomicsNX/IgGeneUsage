// Generated by rstantools.  Do not edit by hand.

/*
    IgGeneUsage is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    IgGeneUsage is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with IgGeneUsage.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_zibb_original_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_zibb_original");
    reader.add_event(136, 134, "end", "model_zibb_original");
    return reader;
}
template <bool propto, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T2__, T3__, T4__>::type
zibb_lpmf(const int& y,
              const int& trials,
              const T2__& a,
              const T3__& b,
              const T4__& zi, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 3;
        if (as_bool(logical_eq(y, 0))) {
            current_statement_begin__ = 4;
            return stan::math::promote_scalar<fun_return_scalar_t__>(log_sum_exp(bernoulli_log(1, zi), (bernoulli_log(0, zi) + beta_binomial_log(0, trials, a, b))));
        } else {
            current_statement_begin__ = 8;
            return stan::math::promote_scalar<fun_return_scalar_t__>((bernoulli_log(0, zi) + beta_binomial_log(y, trials, a, b)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T2__, T3__, T4__>::type
zibb_lpmf(const int& y,
              const int& trials,
              const T2__& a,
              const T3__& b,
              const T4__& zi, std::ostream* pstream__) {
    return zibb_lpmf<false>(y,trials,a,b,zi, pstream__);
}
struct zibb_lpmf_functor__ {
    template <bool propto, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T2__, T3__, T4__>::type
    operator()(const int& y,
              const int& trials,
              const T2__& a,
              const T3__& b,
              const T4__& zi, std::ostream* pstream__) const {
        return zibb_lpmf(y, trials, a, b, zi, pstream__);
    }
};
template <typename T2__, typename T3__, typename T4__, class RNG>
int
zibb_rng(const int& y,
             const int& trials,
             const T2__& a,
             const T3__& b,
             const T4__& zi, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__, T4__>::type local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 14;
        if (as_bool(logical_eq(bernoulli_rng(zi, base_rng__), 1))) {
            current_statement_begin__ = 15;
            return stan::math::promote_scalar<fun_return_scalar_t__>(0);
        } else {
            current_statement_begin__ = 17;
            return stan::math::promote_scalar<fun_return_scalar_t__>(beta_binomial_rng(trials, a, b, base_rng__));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct zibb_rng_functor__ {
    template <typename T2__, typename T3__, typename T4__, class RNG>
        int
    operator()(const int& y,
             const int& trials,
             const T2__& a,
             const T3__& b,
             const T4__& zi, RNG& base_rng__, std::ostream* pstream__) const {
        return zibb_rng(y, trials, a, b, zi, base_rng__, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_zibb_original
  : public stan::model::model_base_crtp<model_zibb_original> {
private:
        int N_sample;
        int N_gene;
        std::vector<std::vector<int> > Y;
        std::vector<int> N;
        std::vector<int> X;
        std::vector<double> Nreal;
public:
    model_zibb_original(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_zibb_original(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_zibb_original_namespace::model_zibb_original";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "N_sample", "int", context__.to_vec());
            N_sample = int(0);
            vals_i__ = context__.vals_i("N_sample");
            pos__ = 0;
            N_sample = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_sample", N_sample, 0);
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "N_gene", "int", context__.to_vec());
            N_gene = int(0);
            vals_i__ = context__.vals_i("N_gene");
            pos__ = 0;
            N_gene = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_gene", N_gene, 0);
            current_statement_begin__ = 26;
            validate_non_negative_index("Y", "N_gene", N_gene);
            validate_non_negative_index("Y", "N_sample", N_sample);
            context__.validate_dims("data initialization", "Y", "int", context__.to_vec(N_gene,N_sample));
            Y = std::vector<std::vector<int> >(N_gene, std::vector<int>(N_sample, int(0)));
            vals_i__ = context__.vals_i("Y");
            pos__ = 0;
            size_t Y_k_0_max__ = N_gene;
            size_t Y_k_1_max__ = N_sample;
            for (size_t k_1__ = 0; k_1__ < Y_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < Y_k_0_max__; ++k_0__) {
                    Y[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 27;
            validate_non_negative_index("N", "N_sample", N_sample);
            context__.validate_dims("data initialization", "N", "int", context__.to_vec(N_sample));
            N = std::vector<int>(N_sample, int(0));
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            size_t N_k_0_max__ = N_sample;
            for (size_t k_0__ = 0; k_0__ < N_k_0_max__; ++k_0__) {
                N[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 28;
            validate_non_negative_index("X", "N_sample", N_sample);
            context__.validate_dims("data initialization", "X", "int", context__.to_vec(N_sample));
            X = std::vector<int>(N_sample, int(0));
            vals_i__ = context__.vals_i("X");
            pos__ = 0;
            size_t X_k_0_max__ = N_sample;
            for (size_t k_0__ = 0; k_0__ < X_k_0_max__; ++k_0__) {
                X[k_0__] = vals_i__[pos__++];
            }
            size_t X_i_0_max__ = N_sample;
            for (size_t i_0__ = 0; i_0__ < X_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "X[i_0__]", X[i_0__], -(1));
                check_less_or_equal(function__, "X[i_0__]", X[i_0__], 1);
            }
            // initialize transformed data variables
            current_statement_begin__ = 35;
            validate_non_negative_index("Nreal", "N_sample", N_sample);
            Nreal = std::vector<double>(N_sample, double(0));
            stan::math::fill(Nreal, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 36;
            stan::math::assign(Nreal, N);
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 41;
            num_params_r__ += 1;
            current_statement_begin__ = 42;
            num_params_r__ += 1;
            current_statement_begin__ = 43;
            num_params_r__ += 1;
            current_statement_begin__ = 44;
            num_params_r__ += 1;
            current_statement_begin__ = 45;
            num_params_r__ += 1;
            current_statement_begin__ = 46;
            validate_non_negative_index("alpha_raw", "N_gene", N_gene);
            num_params_r__ += N_gene;
            current_statement_begin__ = 47;
            validate_non_negative_index("beta_raw", "N_gene", N_gene);
            validate_non_negative_index("beta_raw", "N_sample", N_sample);
            num_params_r__ += (N_gene * N_sample);
            current_statement_begin__ = 48;
            validate_non_negative_index("beta_gene_raw", "N_gene", N_gene);
            num_params_r__ += N_gene;
            current_statement_begin__ = 49;
            num_params_r__ += 1;
            current_statement_begin__ = 50;
            num_params_r__ += 1;
            current_statement_begin__ = 51;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_zibb_original() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 41;
        if (!(context__.contains_r("alpha_grand")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_grand missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_grand");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha_grand", "double", context__.to_vec());
        double alpha_grand(0);
        alpha_grand = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(alpha_grand);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_grand: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 42;
        if (!(context__.contains_r("beta_grand")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_grand missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_grand");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta_grand", "double", context__.to_vec());
        double beta_grand(0);
        beta_grand = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta_grand);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_grand: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 43;
        if (!(context__.contains_r("alpha_sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha_sigma", "double", context__.to_vec());
        double alpha_sigma(0);
        alpha_sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, alpha_sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 44;
        if (!(context__.contains_r("beta_sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta_sigma", "double", context__.to_vec());
        double beta_sigma(0);
        beta_sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, beta_sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 45;
        if (!(context__.contains_r("beta_gene_sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_gene_sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_gene_sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta_gene_sigma", "double", context__.to_vec());
        double beta_gene_sigma(0);
        beta_gene_sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, beta_gene_sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_gene_sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 46;
        if (!(context__.contains_r("alpha_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_raw");
        pos__ = 0U;
        validate_non_negative_index("alpha_raw", "N_gene", N_gene);
        context__.validate_dims("parameter initialization", "alpha_raw", "vector_d", context__.to_vec(N_gene));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_raw(N_gene);
        size_t alpha_raw_j_1_max__ = N_gene;
        for (size_t j_1__ = 0; j_1__ < alpha_raw_j_1_max__; ++j_1__) {
            alpha_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(alpha_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 47;
        if (!(context__.contains_r("beta_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_raw");
        pos__ = 0U;
        validate_non_negative_index("beta_raw", "N_gene", N_gene);
        validate_non_negative_index("beta_raw", "N_sample", N_sample);
        context__.validate_dims("parameter initialization", "beta_raw", "vector_d", context__.to_vec(N_sample,N_gene));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > beta_raw(N_sample, Eigen::Matrix<double, Eigen::Dynamic, 1>(N_gene));
        size_t beta_raw_j_1_max__ = N_gene;
        size_t beta_raw_k_0_max__ = N_sample;
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_raw_k_0_max__; ++k_0__) {
                beta_raw[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t beta_raw_i_0_max__ = N_sample;
        for (size_t i_0__ = 0; i_0__ < beta_raw_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(beta_raw[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_raw: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 48;
        if (!(context__.contains_r("beta_gene_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_gene_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_gene_raw");
        pos__ = 0U;
        validate_non_negative_index("beta_gene_raw", "N_gene", N_gene);
        context__.validate_dims("parameter initialization", "beta_gene_raw", "vector_d", context__.to_vec(N_gene));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_gene_raw(N_gene);
        size_t beta_gene_raw_j_1_max__ = N_gene;
        for (size_t j_1__ = 0; j_1__ < beta_gene_raw_j_1_max__; ++j_1__) {
            beta_gene_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_gene_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_gene_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 49;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec());
        double phi(0);
        phi = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 50;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau", "double", context__.to_vec());
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 51;
        if (!(context__.contains_r("z")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "z", "double", context__.to_vec());
        double z(0);
        z = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, z);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 41;
            local_scalar_t__ alpha_grand;
            (void) alpha_grand;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_grand = in__.scalar_constrain(lp__);
            else
                alpha_grand = in__.scalar_constrain();
            current_statement_begin__ = 42;
            local_scalar_t__ beta_grand;
            (void) beta_grand;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_grand = in__.scalar_constrain(lp__);
            else
                beta_grand = in__.scalar_constrain();
            current_statement_begin__ = 43;
            local_scalar_t__ alpha_sigma;
            (void) alpha_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_sigma = in__.scalar_lb_constrain(0, lp__);
            else
                alpha_sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 44;
            local_scalar_t__ beta_sigma;
            (void) beta_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_sigma = in__.scalar_lb_constrain(0, lp__);
            else
                beta_sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 45;
            local_scalar_t__ beta_gene_sigma;
            (void) beta_gene_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_gene_sigma = in__.scalar_lb_constrain(0, lp__);
            else
                beta_gene_sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 46;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha_raw;
            (void) alpha_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_raw = in__.vector_constrain(N_gene, lp__);
            else
                alpha_raw = in__.vector_constrain(N_gene);
            current_statement_begin__ = 47;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > beta_raw;
            size_t beta_raw_d_0_max__ = N_sample;
            beta_raw.reserve(beta_raw_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta_raw_d_0_max__; ++d_0__) {
                if (jacobian__)
                    beta_raw.push_back(in__.vector_constrain(N_gene, lp__));
                else
                    beta_raw.push_back(in__.vector_constrain(N_gene));
            }
            current_statement_begin__ = 48;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_gene_raw;
            (void) beta_gene_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_gene_raw = in__.vector_constrain(N_gene, lp__);
            else
                beta_gene_raw = in__.vector_constrain(N_gene);
            current_statement_begin__ = 49;
            local_scalar_t__ phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.scalar_lb_constrain(0, lp__);
            else
                phi = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 50;
            local_scalar_t__ tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.scalar_lb_constrain(0, lp__);
            else
                tau = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 51;
            local_scalar_t__ z;
            (void) z;  // dummy to suppress unused var warning
            if (jacobian__)
                z = in__.scalar_lub_constrain(0, 1, lp__);
            else
                z = in__.scalar_lub_constrain(0, 1);
            // transformed parameters
            current_statement_begin__ = 57;
            validate_non_negative_index("beta", "N_gene", N_gene);
            validate_non_negative_index("beta", "N_sample", N_sample);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > beta(N_sample, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(N_gene));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 58;
            validate_non_negative_index("alpha_gene", "N_gene", N_gene);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha_gene(N_gene);
            stan::math::initialize(alpha_gene, DUMMY_VAR__);
            stan::math::fill(alpha_gene, DUMMY_VAR__);
            current_statement_begin__ = 59;
            validate_non_negative_index("beta_gene", "N_gene", N_gene);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_gene(N_gene);
            stan::math::initialize(beta_gene, DUMMY_VAR__);
            stan::math::fill(beta_gene, DUMMY_VAR__);
            current_statement_begin__ = 60;
            validate_non_negative_index("a", "N_gene", N_gene);
            validate_non_negative_index("a", "N_sample", N_sample);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > a(N_sample, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(N_gene));
            stan::math::initialize(a, DUMMY_VAR__);
            stan::math::fill(a, DUMMY_VAR__);
            current_statement_begin__ = 61;
            validate_non_negative_index("b", "N_gene", N_gene);
            validate_non_negative_index("b", "N_sample", N_sample);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > b(N_sample, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(N_gene));
            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 64;
            stan::math::assign(alpha_gene, add(alpha_grand, multiply(alpha_sigma, alpha_raw)));
            current_statement_begin__ = 65;
            stan::math::assign(beta_gene, add(beta_grand, multiply(beta_gene_sigma, beta_gene_raw)));
            current_statement_begin__ = 68;
            for (int i = 1; i <= N_sample; ++i) {
                current_statement_begin__ = 69;
                stan::model::assign(beta, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            add(beta_gene, multiply(beta_sigma, get_base1(beta_raw, i, "beta_raw", 1))), 
                            "assigning variable beta");
                current_statement_begin__ = 70;
                stan::model::assign(a, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            multiply(inv_logit(add(alpha_gene, multiply(get_base1(beta, i, "beta", 1), get_base1(X, i, "X", 1)))), phi), 
                            "assigning variable a");
                current_statement_begin__ = 71;
                stan::model::assign(b, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            subtract(phi, get_base1(a, i, "a", 1)), 
                            "assigning variable b");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 57;
            size_t beta_k_0_max__ = N_sample;
            size_t beta_j_1_max__ = N_gene;
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(beta[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: beta" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 58;
            size_t alpha_gene_j_1_max__ = N_gene;
            for (size_t j_1__ = 0; j_1__ < alpha_gene_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(alpha_gene(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: alpha_gene" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable alpha_gene: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 59;
            size_t beta_gene_j_1_max__ = N_gene;
            for (size_t j_1__ = 0; j_1__ < beta_gene_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(beta_gene(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta_gene" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta_gene: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 60;
            size_t a_k_0_max__ = N_sample;
            size_t a_j_1_max__ = N_gene;
            for (size_t k_0__ = 0; k_0__ < a_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(a[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: a" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable a: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            size_t a_i_0_max__ = N_sample;
            for (size_t i_0__ = 0; i_0__ < a_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "a[i_0__]", a[i_0__], 0);
            }
            current_statement_begin__ = 61;
            size_t b_k_0_max__ = N_sample;
            size_t b_j_1_max__ = N_gene;
            for (size_t k_0__ = 0; k_0__ < b_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(b[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: b" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable b: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            size_t b_i_0_max__ = N_sample;
            for (size_t i_0__ = 0; i_0__ < b_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "b[i_0__]", b[i_0__], 0);
            }
            // model body
            current_statement_begin__ = 77;
            for (int i = 1; i <= N_sample; ++i) {
                current_statement_begin__ = 78;
                for (int j = 1; j <= N_gene; ++j) {
                    current_statement_begin__ = 80;
                    lp_accum__.add(zibb_lpmf(get_base1(get_base1(Y, j, "Y", 1), i, "Y", 2), get_base1(N, i, "N", 1), get_base1(get_base1(a, i, "a", 1), j, "a", 2), get_base1(get_base1(b, i, "b", 1), j, "b", 2), z, pstream__));
                }
            }
            current_statement_begin__ = 86;
            lp_accum__.add(normal_log<propto__>(alpha_grand, 0.0, 10.0));
            current_statement_begin__ = 87;
            lp_accum__.add(normal_log<propto__>(beta_grand, 0.0, 5.0));
            current_statement_begin__ = 89;
            lp_accum__.add(cauchy_log<propto__>(alpha_sigma, 0.0, 1.0));
            current_statement_begin__ = 90;
            lp_accum__.add(cauchy_log<propto__>(beta_sigma, 0.0, 1.0));
            current_statement_begin__ = 91;
            lp_accum__.add(cauchy_log<propto__>(beta_gene_sigma, 0.0, 1.0));
            current_statement_begin__ = 93;
            lp_accum__.add(normal_log<propto__>(alpha_raw, 0.0, 1.0));
            current_statement_begin__ = 94;
            for (int i = 1; i <= N_sample; ++i) {
                current_statement_begin__ = 95;
                lp_accum__.add(normal_log<propto__>(get_base1(beta_raw, i, "beta_raw", 1), 0.0, 1.0));
            }
            current_statement_begin__ = 97;
            lp_accum__.add(normal_log<propto__>(beta_gene_raw, 0.0, 1.0));
            current_statement_begin__ = 99;
            lp_accum__.add(exponential_log<propto__>(phi, tau));
            current_statement_begin__ = 100;
            lp_accum__.add(gamma_log<propto__>(tau, 3.0, 0.1));
            current_statement_begin__ = 101;
            lp_accum__.add(beta_log<propto__>(z, 1.0, 3.0));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha_grand");
        names__.push_back("beta_grand");
        names__.push_back("alpha_sigma");
        names__.push_back("beta_sigma");
        names__.push_back("beta_gene_sigma");
        names__.push_back("alpha_raw");
        names__.push_back("beta_raw");
        names__.push_back("beta_gene_raw");
        names__.push_back("phi");
        names__.push_back("tau");
        names__.push_back("z");
        names__.push_back("beta");
        names__.push_back("alpha_gene");
        names__.push_back("beta_gene");
        names__.push_back("a");
        names__.push_back("b");
        names__.push_back("Yhat");
        names__.push_back("Yhat_individual");
        names__.push_back("Yhat_gene");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_gene);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_sample);
        dims__.push_back(N_gene);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_gene);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_sample);
        dims__.push_back(N_gene);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_gene);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_gene);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_sample);
        dims__.push_back(N_gene);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_sample);
        dims__.push_back(N_gene);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_gene);
        dims__.push_back(N_sample);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_gene);
        dims__.push_back(N_sample);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dims__.push_back(N_gene);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_sample);
        dims__.push_back(N_gene);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_zibb_original_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double alpha_grand = in__.scalar_constrain();
        vars__.push_back(alpha_grand);
        double beta_grand = in__.scalar_constrain();
        vars__.push_back(beta_grand);
        double alpha_sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(alpha_sigma);
        double beta_sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(beta_sigma);
        double beta_gene_sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(beta_gene_sigma);
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_raw = in__.vector_constrain(N_gene);
        size_t alpha_raw_j_1_max__ = N_gene;
        for (size_t j_1__ = 0; j_1__ < alpha_raw_j_1_max__; ++j_1__) {
            vars__.push_back(alpha_raw(j_1__));
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > beta_raw;
        size_t beta_raw_d_0_max__ = N_sample;
        beta_raw.reserve(beta_raw_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta_raw_d_0_max__; ++d_0__) {
            beta_raw.push_back(in__.vector_constrain(N_gene));
        }
        size_t beta_raw_j_1_max__ = N_gene;
        size_t beta_raw_k_0_max__ = N_sample;
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_raw_k_0_max__; ++k_0__) {
                vars__.push_back(beta_raw[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_gene_raw = in__.vector_constrain(N_gene);
        size_t beta_gene_raw_j_1_max__ = N_gene;
        for (size_t j_1__ = 0; j_1__ < beta_gene_raw_j_1_max__; ++j_1__) {
            vars__.push_back(beta_gene_raw(j_1__));
        }
        double phi = in__.scalar_lb_constrain(0);
        vars__.push_back(phi);
        double tau = in__.scalar_lb_constrain(0);
        vars__.push_back(tau);
        double z = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(z);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 57;
            validate_non_negative_index("beta", "N_gene", N_gene);
            validate_non_negative_index("beta", "N_sample", N_sample);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > beta(N_sample, Eigen::Matrix<double, Eigen::Dynamic, 1>(N_gene));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 58;
            validate_non_negative_index("alpha_gene", "N_gene", N_gene);
            Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_gene(N_gene);
            stan::math::initialize(alpha_gene, DUMMY_VAR__);
            stan::math::fill(alpha_gene, DUMMY_VAR__);
            current_statement_begin__ = 59;
            validate_non_negative_index("beta_gene", "N_gene", N_gene);
            Eigen::Matrix<double, Eigen::Dynamic, 1> beta_gene(N_gene);
            stan::math::initialize(beta_gene, DUMMY_VAR__);
            stan::math::fill(beta_gene, DUMMY_VAR__);
            current_statement_begin__ = 60;
            validate_non_negative_index("a", "N_gene", N_gene);
            validate_non_negative_index("a", "N_sample", N_sample);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > a(N_sample, Eigen::Matrix<double, Eigen::Dynamic, 1>(N_gene));
            stan::math::initialize(a, DUMMY_VAR__);
            stan::math::fill(a, DUMMY_VAR__);
            current_statement_begin__ = 61;
            validate_non_negative_index("b", "N_gene", N_gene);
            validate_non_negative_index("b", "N_sample", N_sample);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > b(N_sample, Eigen::Matrix<double, Eigen::Dynamic, 1>(N_gene));
            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 64;
            stan::math::assign(alpha_gene, add(alpha_grand, multiply(alpha_sigma, alpha_raw)));
            current_statement_begin__ = 65;
            stan::math::assign(beta_gene, add(beta_grand, multiply(beta_gene_sigma, beta_gene_raw)));
            current_statement_begin__ = 68;
            for (int i = 1; i <= N_sample; ++i) {
                current_statement_begin__ = 69;
                stan::model::assign(beta, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            add(beta_gene, multiply(beta_sigma, get_base1(beta_raw, i, "beta_raw", 1))), 
                            "assigning variable beta");
                current_statement_begin__ = 70;
                stan::model::assign(a, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            multiply(inv_logit(add(alpha_gene, multiply(get_base1(beta, i, "beta", 1), get_base1(X, i, "X", 1)))), phi), 
                            "assigning variable a");
                current_statement_begin__ = 71;
                stan::model::assign(b, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            subtract(phi, get_base1(a, i, "a", 1)), 
                            "assigning variable b");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 60;
            size_t a_i_0_max__ = N_sample;
            for (size_t i_0__ = 0; i_0__ < a_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "a[i_0__]", a[i_0__], 0);
            }
            current_statement_begin__ = 61;
            size_t b_i_0_max__ = N_sample;
            for (size_t i_0__ = 0; i_0__ < b_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "b[i_0__]", b[i_0__], 0);
            }
            // write transformed parameters
            if (include_tparams__) {
                size_t beta_j_1_max__ = N_gene;
                size_t beta_k_0_max__ = N_sample;
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                        vars__.push_back(beta[k_0__](j_1__));
                    }
                }
                size_t alpha_gene_j_1_max__ = N_gene;
                for (size_t j_1__ = 0; j_1__ < alpha_gene_j_1_max__; ++j_1__) {
                    vars__.push_back(alpha_gene(j_1__));
                }
                size_t beta_gene_j_1_max__ = N_gene;
                for (size_t j_1__ = 0; j_1__ < beta_gene_j_1_max__; ++j_1__) {
                    vars__.push_back(beta_gene(j_1__));
                }
                size_t a_j_1_max__ = N_gene;
                size_t a_k_0_max__ = N_sample;
                for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < a_k_0_max__; ++k_0__) {
                        vars__.push_back(a[k_0__](j_1__));
                    }
                }
                size_t b_j_1_max__ = N_gene;
                size_t b_k_0_max__ = N_sample;
                for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < b_k_0_max__; ++k_0__) {
                        vars__.push_back(b[k_0__](j_1__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 107;
            validate_non_negative_index("Yhat", "N_gene", N_gene);
            validate_non_negative_index("Yhat", "N_sample", N_sample);
            std::vector<std::vector<double> > Yhat(N_gene, std::vector<double>(N_sample, double(0)));
            stan::math::initialize(Yhat, DUMMY_VAR__);
            stan::math::fill(Yhat, DUMMY_VAR__);
            current_statement_begin__ = 110;
            validate_non_negative_index("Yhat_individual", "N_gene", N_gene);
            validate_non_negative_index("Yhat_individual", "N_sample", N_sample);
            std::vector<std::vector<double> > Yhat_individual(N_gene, std::vector<double>(N_sample, double(0)));
            stan::math::initialize(Yhat_individual, DUMMY_VAR__);
            stan::math::fill(Yhat_individual, DUMMY_VAR__);
            current_statement_begin__ = 113;
            validate_non_negative_index("Yhat_gene", "2", 2);
            validate_non_negative_index("Yhat_gene", "N_gene", N_gene);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Yhat_gene(2, N_gene);
            stan::math::initialize(Yhat_gene, DUMMY_VAR__);
            stan::math::fill(Yhat_gene, DUMMY_VAR__);
            current_statement_begin__ = 116;
            validate_non_negative_index("log_lik", "N_gene", N_gene);
            validate_non_negative_index("log_lik", "N_sample", N_sample);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > log_lik(N_sample, Eigen::Matrix<double, Eigen::Dynamic, 1>(N_gene));
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 119;
            for (int j = 1; j <= N_gene; ++j) {
                current_statement_begin__ = 120;
                for (int i = 1; i <= N_sample; ++i) {
                    current_statement_begin__ = 121;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                zibb_lpmf(get_base1(get_base1(Y, j, "Y", 1), i, "Y", 2), get_base1(N, i, "N", 1), get_base1(get_base1(a, i, "a", 1), j, "a", 2), get_base1(get_base1(b, i, "b", 1), j, "b", 2), z, pstream__), 
                                "assigning variable log_lik");
                    current_statement_begin__ = 122;
                    stan::model::assign(Yhat, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                zibb_rng(get_base1(get_base1(Y, j, "Y", 1), i, "Y", 2), get_base1(N, i, "N", 1), get_base1(get_base1(a, i, "a", 1), j, "a", 2), get_base1(get_base1(b, i, "b", 1), j, "b", 2), z, base_rng__, pstream__), 
                                "assigning variable Yhat");
                    current_statement_begin__ = 124;
                    if (as_bool(logical_eq(get_base1(Nreal, i, "Nreal", 1), 0.0))) {
                        current_statement_begin__ = 125;
                        stan::model::assign(Yhat_individual, 
                                    stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                    0.0, 
                                    "assigning variable Yhat_individual");
                    } else {
                        current_statement_begin__ = 128;
                        stan::model::assign(Yhat_individual, 
                                    stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                    (get_base1(get_base1(Yhat, j, "Yhat", 1), i, "Yhat", 2) / get_base1(Nreal, i, "Nreal", 1)), 
                                    "assigning variable Yhat_individual");
                    }
                }
                current_statement_begin__ = 131;
                stan::model::assign(Yhat_gene, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            inv_logit((get_base1(alpha_gene, j, "alpha_gene", 1) + (get_base1(beta_gene, j, "beta_gene", 1) * 1.0))), 
                            "assigning variable Yhat_gene");
                current_statement_begin__ = 132;
                stan::model::assign(Yhat_gene, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            inv_logit((get_base1(alpha_gene, j, "alpha_gene", 1) + (get_base1(beta_gene, j, "beta_gene", 1) * -(1.0)))), 
                            "assigning variable Yhat_gene");
            }
            // validate, write generated quantities
            current_statement_begin__ = 107;
            size_t Yhat_k_0_max__ = N_gene;
            size_t Yhat_k_1_max__ = N_sample;
            for (size_t k_1__ = 0; k_1__ < Yhat_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < Yhat_k_0_max__; ++k_0__) {
                    vars__.push_back(Yhat[k_0__][k_1__]);
                }
            }
            current_statement_begin__ = 110;
            size_t Yhat_individual_k_0_max__ = N_gene;
            size_t Yhat_individual_k_1_max__ = N_sample;
            for (size_t k_1__ = 0; k_1__ < Yhat_individual_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < Yhat_individual_k_0_max__; ++k_0__) {
                    vars__.push_back(Yhat_individual[k_0__][k_1__]);
                }
            }
            current_statement_begin__ = 113;
            size_t Yhat_gene_j_2_max__ = N_gene;
            size_t Yhat_gene_j_1_max__ = 2;
            for (size_t j_2__ = 0; j_2__ < Yhat_gene_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Yhat_gene_j_1_max__; ++j_1__) {
                    vars__.push_back(Yhat_gene(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 116;
            size_t log_lik_j_1_max__ = N_gene;
            size_t log_lik_k_0_max__ = N_sample;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
                    vars__.push_back(log_lik[k_0__](j_1__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_zibb_original";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_grand";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_grand";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_gene_sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t alpha_raw_j_1_max__ = N_gene;
        for (size_t j_1__ = 0; j_1__ < alpha_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_raw_j_1_max__ = N_gene;
        size_t beta_raw_k_0_max__ = N_sample;
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_raw_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_raw" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t beta_gene_raw_j_1_max__ = N_gene;
        for (size_t j_1__ = 0; j_1__ < beta_gene_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_gene_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "z";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t beta_j_1_max__ = N_gene;
            size_t beta_k_0_max__ = N_sample;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t alpha_gene_j_1_max__ = N_gene;
            for (size_t j_1__ = 0; j_1__ < alpha_gene_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha_gene" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_gene_j_1_max__ = N_gene;
            for (size_t j_1__ = 0; j_1__ < beta_gene_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_gene" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t a_j_1_max__ = N_gene;
            size_t a_k_0_max__ = N_sample;
            for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < a_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "a" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t b_j_1_max__ = N_gene;
            size_t b_k_0_max__ = N_sample;
            for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < b_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "b" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t Yhat_k_0_max__ = N_gene;
        size_t Yhat_k_1_max__ = N_sample;
        for (size_t k_1__ = 0; k_1__ < Yhat_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < Yhat_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Yhat" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Yhat_individual_k_0_max__ = N_gene;
        size_t Yhat_individual_k_1_max__ = N_sample;
        for (size_t k_1__ = 0; k_1__ < Yhat_individual_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < Yhat_individual_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Yhat_individual" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Yhat_gene_j_2_max__ = N_gene;
        size_t Yhat_gene_j_1_max__ = 2;
        for (size_t j_2__ = 0; j_2__ < Yhat_gene_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Yhat_gene_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Yhat_gene" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t log_lik_j_1_max__ = N_gene;
        size_t log_lik_k_0_max__ = N_sample;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lik" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_grand";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_grand";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_gene_sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t alpha_raw_j_1_max__ = N_gene;
        for (size_t j_1__ = 0; j_1__ < alpha_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_raw_j_1_max__ = N_gene;
        size_t beta_raw_k_0_max__ = N_sample;
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_raw_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_raw" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t beta_gene_raw_j_1_max__ = N_gene;
        for (size_t j_1__ = 0; j_1__ < beta_gene_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_gene_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "z";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t beta_j_1_max__ = N_gene;
            size_t beta_k_0_max__ = N_sample;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t alpha_gene_j_1_max__ = N_gene;
            for (size_t j_1__ = 0; j_1__ < alpha_gene_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha_gene" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_gene_j_1_max__ = N_gene;
            for (size_t j_1__ = 0; j_1__ < beta_gene_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_gene" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t a_j_1_max__ = N_gene;
            size_t a_k_0_max__ = N_sample;
            for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < a_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "a" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t b_j_1_max__ = N_gene;
            size_t b_k_0_max__ = N_sample;
            for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < b_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "b" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t Yhat_k_0_max__ = N_gene;
        size_t Yhat_k_1_max__ = N_sample;
        for (size_t k_1__ = 0; k_1__ < Yhat_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < Yhat_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Yhat" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Yhat_individual_k_0_max__ = N_gene;
        size_t Yhat_individual_k_1_max__ = N_sample;
        for (size_t k_1__ = 0; k_1__ < Yhat_individual_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < Yhat_individual_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Yhat_individual" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Yhat_gene_j_2_max__ = N_gene;
        size_t Yhat_gene_j_1_max__ = 2;
        for (size_t j_2__ = 0; j_2__ < Yhat_gene_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Yhat_gene_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Yhat_gene" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t log_lik_j_1_max__ = N_gene;
        size_t log_lik_k_0_max__ = N_sample;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lik" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_zibb_original_namespace::model_zibb_original stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
